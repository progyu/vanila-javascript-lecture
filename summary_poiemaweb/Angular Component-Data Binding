# Angular Component - Data Binding



## 데이터 바인딩(Data binding)이란?

Angular의 데이터 바인딩은 템플릿(View)과 컴포넌트 클래스의 데이터(Model)을 하나로 묶어 유기적으로 동작하게 하는 것을 말한다. 이는 템플릿의 정적 HTML에 컴포넌트의 동적 데이터를 하나로 묶어 브라우저에 표시할 완성된 뷰를 만들기 위함이다.

기존의 웹 애플리케이션은 자바스크립트 DOM API를 사용하여 DOM을 직접 조작(Manipulation)하는 방식이기 때문에 뷰와 모델 간의 관계를 느슨하게 결합하기 어려운 구조를 갖는다. **이와 같은 구조 상 문제로 뷰가 변경되면 로직도 변경될 가능성이 매우 높다.**

하지만 Angular는 DOM에 직접 접근하지 않고 템플릿과 컴포넌트 클래스의 상호 관계를 선언하는 방식(선언형 프로그래밍: Declarative programming)으로 뷰와 모델의 관계를 관리한다. 이때 사용되는 것이 **데이터 바인딩**이며 이를 통해 템플릿과 컴포넌트 클래스는 연결된다. 데이터 바인딩은 **템플릿 문법**으로 기술된다. 

![1560685247797](C:\Users\gyuha\AppData\Roaming\Typora\typora-user-images\1560685247797.png)

위의 예제의 경우, 템플릿에서 직접 컴포넌트 클래스의 프로퍼티를 참조하기 때문에 DOM에 접근하고 조작하는 코드를 작성할 필요가 없다. **따라서 컴포넌트 클래스는 DOM의 구조를 파악하고 있을 필요가 없으며 템플릿이 변경되어도 컴포넌트 클래스를 변경할 필요가 없다**



## 변화감지(Change detection)

상태의 변화를 감지하여 뷰에 반영하는 것으로 **데이터 바인딩은 변화 감지 매커니즘의 토대 위에서 수행된다.**

 Angular는 양방향 바인딩과 단방향 바인딩(One-way binding)을 모두 지원한다.

> 사실 Angular는 [양방향 바인딩](https://poiemaweb.com/angular-component-template-syntax#17-%EC%96%91%EB%B0%A9%ED%96%A5-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B0%94%EC%9D%B8%EB%94%A9two-way-binding)을 지원하지 않는다. 양방향 바인딩을 위한 템플릿 문법 `[()]`(이것을 Banana in a box라고 부른다)에서 추측할 수 있듯이 양방향 바인딩은 이벤트 바인딩과 프로퍼티 바인딩의 축약 표현(Shorthand syntax)일 뿐이다. **즉, 양방향 바인딩의 실제 동작은 이벤트 바인딩과 프로퍼티 바인딩의 조합으로 이루어진다.**



Angular는 컴포넌트 클래스의 프로퍼티 값이 변경되는 상황, 즉 어떤 경우 모델이 변화하는지에 주목한다.

**모델이 변화활 가능성이 있는경우**

- DOM 이벤트(click, key press, mouse move 등)
- Timer 함수(setTimeout, setInterval)의 tick 이벤트
- Ajax 통신 / Promise



## 데이터 바인딩

Angular의 7가지 데이터 바인딩

| 데이터 바인딩        | 데이터 흐름                | 문법                               |
| -------------------- | -------------------------- | ---------------------------------- |
| 인터폴레이션         | 컴포넌트 클래스 => 템플릿  | {{ expression}}                    |
| 프로퍼티 바인딩      | 컴포넌트 클래스 => 템플릿  | [property]="expression"            |
| 어트리뷰트 바인딩    | 컴포넌트 클래스 => 템플릿  | [attr.attribute-name]="expression" |
| 클래스 바인딩        | 컴포넌트 클래스 => 템플릿  | [class.class-name]="expression"    |
| 스타일 바인딩        | 컴포넌트 클래스 => 템플릿  | [style.style-name]="expression"    |
| 이벤트 바인딩        | 컴포넌트 클래스 => 템플릿  | (event)="statement"                |
| 양방향 데이터 바인딩 | 컴포넌트 클래스 <=> 템플릿 | [(ngModel)]="property"             |



### 1. 인터폴레이션(Interpolation)

표현식을 두 개의 중괄호로 열고닫은 형식을 인터폴레이션이라 한다. 인터폴레이션은 단방향 데이터 바인딩에 사용되는 템플릿 문법으로 표현식의 평가 결과를 **문자열로 변환**하여 템플릿에 바인딩한다.

컴포넌트 클래스의 프로퍼티가 문자열이 아닌 경우 문자열로 변환되며 존재하지 않는 프로퍼티에 접근하는 경우(위 예제의 gender) 에러 발생 없이 아무것도 출력하지 않는다.



### 2. 프로퍼티 바인딩(Property binding)

프로퍼티 바인딩은 컴포넌트 클래스의 프로퍼티와 템플릿 간의 단방향 데이터 바인딩에 사용되는 템플릿 문법으로 **표현식의 평가 결과를 HTML 요소의 DOM 프로퍼티에 바인딩**한다.

프로퍼티 바인딩에는 객체를 포함한 모든 값을 사용할 수 있다. DOM 노드 객체의 프로퍼티에는 객체를 포함한 모든 값을 할당할 수 있기 때문이다. **이 특성을 이용하여 부모 컴포넌트에서 자식 컴포넌트로 값을 전달하는 경우 프로퍼티 바인딩을 사용한다.**



### 3. 어트리뷰트 바인딩(Attribute binding)

어트리뷰트 바인딩은 컴포넌트 클래스의 프로퍼티와 템플릿 간의 단방향 데이터 바인딩에 사용되는 템플릿 문법으로 표현식의 평가 결과를 HTML 어트리뷰트에 바인딩한다.

**HTML 어트리뷰트(attribute)와 DOM 프로퍼티(property)의 차이**

어트리뷰트와 프로퍼티는 모두 속성으로 변역되어 같은 것으로 오해할 수 있으나 이들은 서로 다른 것이다.  어트리뷰트는 HTML 문서에 존재하는 것으로 **어트리뷰트의 값은 변하지 않는다.** 프로퍼티는 **DOM 노드 객체에 있는 것으로 동적으로 변한다.**

브라우저는 HTML 문서를 파싱하여 **DOM 트리로 변환**하고 메모리에 적재한다. 이때 **HTML 요소는 DOM 노드 객체**로, **HTML 어트리뷰트는 DOM 노드 객체의 프로퍼티로 변환**된다.



아래의 **input 요소는 3개의 어트리뷰트**를 가지고 있다.

```javascript
<input id="user" type="text" value="ungmo2">
```

브라우저가 위의 코드를 파싱하면 DOM 노드 객체 `HTMLInputElement`가 생성되고 **이 객체는 다양한 프로퍼티를 소유**한다. input 요소의 모든 어트리뷰트는 `HTMLInputElement` 객체의 `attributes` **프로퍼티로 변환**되고 이것은 `getAttribute` 메소드로 취득 가능하다.

DOM 노드 객체의 `attributes` **프로퍼티는** HTML 어트리뷰트의 값을 가지며 **그 값은 결코 변하지 않는다.** 

하지만 **DOM은 상태**(예를 들어 input 요소에 값을 입력한 상태 또는 checkbox 요소를 체크한 상태)를 가지고 있으며 이 **상태는 변화하는 살아있는 것**이다. 따라서 **DOM 노드 객체는 상태 변화를 관리하기 위한 프로퍼티를 갖는다.**  예를 들어 input 요소는 입력값의 상태를 관리하기 위해 value 프로퍼티를 갖는다. 

```javascript
// HTMLInputElement.attributes.value의 값을 취득한다. 결과는 언제나 동일하다.
document.getElementById('user').getAttribute('value'); // ungmo2

// HTMLInputElement.value의 값을 취득한다. 결과는 요소의 상태에 따라 동적으로 변경된다.
document.getElementById('user').value;
```

주의하여야 할 것은 HTML 어트리뷰트와 상태 변화를 관리하기 위한 **프로퍼티가 언제나 1:1로 매핑되는 것은 아니라는 것이다.** 

예를 들어 td 요소의 colspan 어트리뷰트의 경우, 매핑하는 프로퍼티가 존재하지 않는다. 프로퍼티 바인딩을 사용하려하면 존재하지 않는 DOM 프로퍼티 colspan에 접근하려 하기 때문에  에러가 발생한다. 이와 같은 경우, 프로퍼티 바인딩 대신 어트리뷰트 바인딩을 사용한다.



### 4. 클래스 바인딩

클래스 바인딩을 사용하면 HTML 요소의 class 어트리뷰트에 클래스를 추가 또는 삭제할 수 있다. 클래스 바인딩은 아래와 같이 두 가지의 방식으로 사용할 수 있다.

```javascript
<element [class.class-name]="booleanExpression">...</element>
<element [class]="class-name-list">...</element>
```



**단항 클래스 바인딩**

클래스 바인딩의 좌변에는 class 뒤에 HTML 요소의 class 어트리뷰트에 반영할 클래스 이름을 지정하고, 우변에는 참이나 거짓으로 평가될 수 있는 표현식을 바인딩한다.

```javascript
<div [class.alert]="isError">...</div>
```

위 예제의 경우, 우변의 표현식 isError의 값이 **참**이면 좌변의 class 뒤에 지정한 클래스 alert을 class 어트리뷰트에 **추가**하고, isError의 값이 **거짓**이면 class 어트리뷰트에서 **삭제**한다.



**다항 클래스 바인딩**

클래스 바인딩의 좌변에는 class를 지정하고 우변에는 **HTML 요소의 class 어트리뷰트에 반영할 클래스의 리스트**(공백으로 구분된 클래스 리스트의 문자열)를 바인딩한다

**클래스 바인딩은 기존 class 어트리뷰트보다 우선한다.** 따라서 기존 class 어트리뷰트는 클래스 바인딩에 의해 리셋된다. 이때 클래스 바인딩의 위치는 관계없다.

**클래스 바인딩은 주로 하나의 클래스를 조건에 의해 추가 또는 삭제하는 용도로 사용한다.** 여러 개의 클래스를 지정할 때도 클래스 바인딩을 사용할 수 있으나 ngClass 디렉티브를 사용하면 좀더 세밀한 제어가 가능하다.



### 5. 스타일 바인딩

스타일 바인딩을 사용하면 HTML 요소의 style 어트리뷰트에 스타일을 지정할 수 있다.

스타일 바인딩의 좌변에는 style 뒤에 style 어트리뷰트에 반영할 CSS 프로퍼티 이름을 지정하고 우변에는 CSS 프로퍼티의 값으로 평가될 수 있는 표현식을 바인딩한다. **만약 CSS 프로퍼티 값에 단위가 필요한 경우, CSS 프로퍼티에 단위를 추가한다.**

```javascript
<div [style.background-color]="'white'"
     [style.font-size.px]="'16'">...</div>
```

**스타일 바인딩은 기존 style 어트리뷰트보다 우선한다.**

**스타일 바인딩은 주로 하나의 인라인 스타일을 조건에 의해 추가하는 용도로 사용**한다. 여러 개의 인라인 스타일을 추가할 때는 ngStyle 디렉티브를 사용한다.



### 6. 이벤트 바인딩(Event binding)

이벤트 바인딩은 뷰의 상태 변화(버튼 클릭, 체크박스 체크, input에 텍스트 입력 등)에 의해 이벤트가 발생하면 이벤트 핸들러를 호출하는 것을 말한다.

지금까지 살펴본 데이터 바인딩은 모두 컴포넌트 클래스에서 템플릿으로 데이터가 이동했지만 **이벤트 바인딩은 템플릿에서 컴포넌트 클래스로 데이터가 이동한다.**

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <!-- (1) -->
    <input type="text" [value]="name" (input)="setName($event)">
    <!-- (2) -->
    <button (click)="clearName()">clear</button>
    <!-- (3) -->
    <p>name: {{ name }}</p>
  `
})
export class AppComponent {
  name = '';

  setName(event) {
    console.log(event);
    // event.target.value에는 사용자 입력 텍스트가 담겨있다.
    this.name = event.target.value;
  }

  clearName() {
    this.name = '';
  }
}
```



### 7. 양방향 데이터 바인딩(Two-way data binding)

양방향 데이터 바인딩은 뷰와 컴포넌트 클래스의 상태 변화를 상호 반영하는 것을 말한다. 즉, 뷰의 상태가 변화하면 컴포넌트 클래스의 상태도 변화하고 그 반대로 컴포넌트 클래스의 상태가 변화하면 뷰의 상태도 변화하는 것이다.

ngModel 디렉티브를 이벤트 바인딩(( ))과 프로퍼티 바인딩([ ]) 형식으로 기술한 후 우변에 뷰와 컴포넌트 클래스가 공유할 프로퍼티를 기술한다. 

```typescript
<element [(ngModel)]="property">...</element>
```

ngModel 디렉티브를 사용하기 위해서는 FormsModule을 모듈에 등록하여야 한다.



```typescript
// src/app/app.component.ts
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <input type="text" [(ngModel)]="name">
    <p>name: {{ name }}</p>
  `
})
export class AppComponent {
  name = '';
}
```

컴포넌트 클래스의 name 프로퍼티는 템플릿의 input 요소와 양방향으로 바인딩되어 있다. 즉, **input 요소의 value 프로퍼티가 변화하면 컴포넌트 클래스의 name 프로퍼티도 동일한 값으로 변화하고 반대로 컴포넌트 클래스의 name 프로퍼티가 변화하면 input 요소의 value 프로퍼티도 동일한 값으로 변화한다.**

```typescript
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <input type="text" [value]="name" (input)="name=$event.target.value">
    <p>name: {{ name }}</p>
  `
})
export class AppComponent {
  name = '';
}
```

**ngModel**은 이벤트 바인딩과 프로퍼티 바인딩으로 구현되는 **양방향 바인딩을 간편하게 작성할 수 있도록 돕는 디렉티브**로서 **사용자 입력**과 관련한 DOM 요소(input, textarea, select 등의 폼 컨트롤 요소)에서만 사용할 수 있다. 